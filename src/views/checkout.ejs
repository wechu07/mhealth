<% layout('layout/layout') %>

  <div class="container">
    <div class="row justify-content-center">
      <div class="col-lg-6 col-md-8 text-center">
        <div class="text-center mx-auto mb-5 wow fadeInUp" data-wow-delay="0.1s"">
          <img class=" img-fluid w-100 h-100" src="img/home/academy.png" alt="">
        </div>
      </div>
      <div class="col-lg-6 col-md-8 text-center">
        <p>Paying $190 will give you access to the academy. You can pay via PayPal or Debit Card.</p>
        <div id="paypal-button-container"></div>
      </div>
    </div>
  </div>
  <p id="result-message"></p>
  <!-- Replace the "test" client-id value with your client-id -->
  <script
    src="https://www.paypal.com/sdk/js?client-id=ATo1CK00WQU_gqbZHrlDFf16OUoM3hmOAxfob6Kyd3YFMoO-vJZJJK31qlnqJF2x80Fh7jOk8GHI4n9p&components=buttons&enable-funding=venmo,paylater"
    data-sdk-integration-source="integrationbuilder_sc"></script>
  <script>
    window.paypal
      .Buttons({
        style: {
          shape: "rect",
          //color:'blue', change the default color of the buttons
          layout: "vertical", //default value. Can be changed to horizontal
        },
        async createOrder() {
          try {
            const response = await fetch("/api/orders", {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              // use the "body" param to optionally pass additional order information
              // like product ids and quantities
              body: JSON.stringify({
                cart: [
                  {
                    id: "academy101",
                    quantity: "1",
                  },
                ],
              }),
            });

            const orderData = await response.json();

            if (orderData.id) {
              return orderData.id;
            } else {
              const errorDetail = orderData?.details?.[0];
              const errorMessage = errorDetail
                ? `${errorDetail.issue} ${errorDetail.description} (${orderData.debug_id})`
                : JSON.stringify(orderData);

              throw new Error(errorMessage);
            }
          } catch (error) {
            console.error(error);
            resultMessage(`Could not initiate PayPal Checkout...<br><br>${error}`);
          }
        },
        async onApprove(data, actions) {
          try {
            const response = await fetch(`/api/orders/${data.orderID}/capture`, {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
            });

            const orderData = await response.json();
            // Three cases to handle:
            //   (1) Recoverable INSTRUMENT_DECLINED -> call actions.restart()
            //   (2) Other non-recoverable errors -> Show a failure message
            //   (3) Successful transaction -> Show confirmation or thank you message

            const errorDetail = orderData?.details?.[0];

            if (errorDetail?.issue === "INSTRUMENT_DECLINED") {
              // (1) Recoverable INSTRUMENT_DECLINED -> call actions.restart()
              // recoverable state, per https://developer.paypal.com/docs/checkout/standard/customize/handle-funding-failures/
              return actions.restart();
            } else if (errorDetail) {
              // (2) Other non-recoverable errors -> Show a failure message
              throw new Error(`${errorDetail.description} (${orderData.debug_id})`);
            } else if (!orderData.purchase_units) {
              throw new Error(JSON.stringify(orderData));
            } else {
              // (3) Successful transaction -> Show confirmation or thank you message
              // Or go to another URL:  actions.redirect('thank_you.html');
              const transaction =
                orderData?.purchase_units?.[0]?.payments?.captures?.[0] ||
                orderData?.purchase_units?.[0]?.payments?.authorizations?.[0];
              resultMessage(
                `Transaction ${transaction.status}: ${transaction.id}<br><br>Redirecting you to our academy`
              );
              // Redirect to https://mhealth4africa.lecturio.com/
              window.location.href = 'https://mhealth4africa.lecturio.com/';
              console.log(
                "Capture result",
                orderData,
                JSON.stringify(orderData, null, 2)
              );
            }
          } catch (error) {
            console.error(error);
            resultMessage(
              `Sorry, your transaction could not be processed...<br><br>${error}`
            );
          }
        },
      })
      .render("#paypal-button-container");

    // Example function to show a result to the user. Your site's UI library can be used instead.
    function resultMessage(message) {
      const container = document.querySelector("#result-message");
      container.innerHTML = message;
    }

  </script>